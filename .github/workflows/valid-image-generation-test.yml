name: Test if current code can generate a valid image

on: [push]

env:
   REGISTRY: ghcr.io
   DOCKER_IMAGE_NAME: ${{ github.repository }}
   URL_AUTH_SERVICE: localhost:8090/authToken


jobs:
  test-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run mongo container
        run: |
          cd db/mongo/
          bash scripts/create_image.sh
          bash scripts/run_container.sh


      - name: Lower case DOCKER_IMAGE_NAME
        run: echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $REGISTRY/$DOCKER_IMAGE_NAME .

      - name: Create .env file
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mongo_db_4_uploader)
          printf "
            URL_AUTH_SERVICE=$URL_AUTH_SERVICE\n
            MONGO_URL=mongodb://myUserAdmin:tupperware@$CONTAINER_IP:27017/multi_tenant_uploader?authSource=admin\n
            WHITELISTED_IP=localhost\n
            DB_NAME=${{ secrets.DB_NAME }}
            " > .env

      - name: Lower case DOCKER_IMAGE_NAME
        run: echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Run Docker container
        run: |
          (timeout 60s docker run --env-file "$(pwd)/.env" $REGISTRY/$DOCKER_IMAGE_NAME) ||
          if [ $? -eq 124 ]; then
            echo "OK, timeout error is acceptable."
          else
            exit $?
          fi