name: Test if current code can generate a valid image

on: [push]

env:
   REGISTRY: ghcr.io
   DOCKER_IMAGE_NAME: ${{ github.repository }}
   URL_AUTH_SERVICE: localhost:8090/authToken


jobs:
  test-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install MongoDB Community Edition
        run: |
          sudo apt-get install gnupg
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
          echo '------'
          cat /etc/lsb-release
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          echo '------'
          sudo apt-get update
          sudo apt-get install -y mongodb-org

      - name: Mongo version
        run: |
          echo "mongod version is $(mongod --version)"
          echo "mongosh version is $(mongosh --version)"

      - name: Start MongoDB and verify status
        run: |
          sudo systemctl start mongod
          echo "mongod status is:  $(systemctl status mongod)"
          ls

      - name: Verify if the mongod process is running
        run: |
          ps -ef | grep mongod

      - name: mongosh help
        run: |
          mongosh --help

      - name: Verify that the MongoDB server is listening on the default port 2701
        run: |
          sudo netstat -plnt

      - name: Verify why MongoDB server isn't running on the default port 2701
        run: |
          cat /etc/mongod.conf

      - name: Allow connections from other IP addresses in Mongo instance
        run: |
          sudo sed -i 's/bindIp: 127.0.0.1/bindIp: 0.0.0.0/' /etc/mongod.conf

      - name: Verify that mongo.config changed
        run: |
          cat /etc/mongod.conf

      - name: Sleep to give time to mongo to catchup
        run: sleep 10

      - name: Use mongosh
        run: |
          mongosh "127.0.0.1:27017/multi_tenant_uploader" --eval "print('Hello, World!')"

      - name: Insert data
        run: |
          mongosh "127.0.0.1:27017/multi_tenant_uploader" --eval "db.tenant_driver.insertOne(db/mongo/scripts/example_file_for_inserting_2_one_drive)"

      - name: Lower case DOCKER_IMAGE_NAME
        run: echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t $REGISTRY/$DOCKER_IMAGE_NAME .

      - name: Create .env file
        run: |
          printf "
            URL_AUTH_SERVICE=$URL_AUTH_SERVICE\n
            MONGO_URL=url_to_the_mongo_instance_local_for_the_job\n
            DB_NAME=${{ secrets.DB_NAME }}
            " > .env

      - name: Lower case DOCKER_IMAGE_NAME
        run: echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Run Docker container
        run: |
          (timeout 60s docker run --env-file "$(pwd)/.env" $REGISTRY/$DOCKER_IMAGE_NAME) ||
          if [ $? -eq 124 ]; then
            echo "OK, timeout error is acceptable."
          else
            exit $?
          fi
        continue-on-error: true
